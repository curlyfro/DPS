@page "/Account/Register"
@using Microsoft.AspNetCore.Identity
@using DocumentProcessor.Core.Entities
@using System.ComponentModel.DataAnnotations
@using DocumentProcessor.Web.Validation
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation
@inject ILogger<Register> Logger
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Register - Document Processor</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">
                        <i class="bi bi-person-plus"></i> Register
                    </h3>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    @if (registrationSuccess)
                    {
                        <div class="alert alert-success" role="alert">
                            <h4 class="alert-heading">Registration Successful!</h4>
                            <p>Your account has been created successfully. You will be redirected to the login page shortly.</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
                            <DataAnnotationsValidator />
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="firstName" class="form-label">First Name</label>
                                    <InputText id="firstName" @bind-Value="registerModel.FirstName" class="form-control" placeholder="John" />
                                    <ValidationMessage For="() => registerModel.FirstName" class="text-danger small" />
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    <label for="lastName" class="form-label">Last Name</label>
                                    <InputText id="lastName" @bind-Value="registerModel.LastName" class="form-control" placeholder="Doe" />
                                    <ValidationMessage For="() => registerModel.LastName" class="text-danger small" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" @bind-Value="registerModel.Email" class="form-control" placeholder="john.doe@example.com" />
                                <ValidationMessage For="() => registerModel.Email" class="text-danger small" />
                            </div>

                            <div class="mb-3">
                                <label for="department" class="form-label">Department</label>
                                <InputText id="department" @bind-Value="registerModel.Department" class="form-control" placeholder="IT, HR, Finance, etc." />
                                <ValidationMessage For="() => registerModel.Department" class="text-danger small" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Password</label>
                                <InputText id="password" type="password" @bind-Value="registerModel.Password" class="form-control" placeholder="Enter a strong password" />
                                <ValidationMessage For="() => registerModel.Password" class="text-danger small" />
                                <small class="form-text text-muted">
                                    Password must be at least 8 characters with uppercase, lowercase, number, and special character.
                                </small>
                            </div>

                            <div class="mb-3">
                                <label for="confirmPassword" class="form-label">Confirm Password</label>
                                <InputText id="confirmPassword" type="password" @bind-Value="registerModel.ConfirmPassword" class="form-control" placeholder="Re-enter your password" />
                                <ValidationMessage For="() => registerModel.ConfirmPassword" class="text-danger small" />
                            </div>

                            <div class="mb-3 form-check">
                                <InputCheckbox id="agreeTerms" @bind-Value="registerModel.AgreeToTerms" class="form-check-input" />
                                <label class="form-check-label" for="agreeTerms">
                                    I agree to the <a href="/terms" target="_blank">Terms of Service</a> and <a href="/privacy" target="_blank">Privacy Policy</a>
                                </label>
                                <ValidationMessage For="() => registerModel.AgreeToTerms" class="text-danger small d-block" />
                            </div>

                            <div class="d-grid gap-2">
                                <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                        <span>Creating Account...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-person-plus me-2"></i>
                                        <span>Register</span>
                                    }
                                </button>
                            </div>
                            
                            <hr class="my-3" />
                            
                            <div class="text-center">
                                <span class="text-muted">Already have an account?</span>
                                <a href="/Account/Login" class="text-decoration-none ms-1">Login</a>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;
    private bool registrationSuccess = false;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            // Check if user already exists
            var existingUser = await UserManager.FindByEmailAsync(registerModel.Email);
            if (existingUser != null)
            {
                errorMessage = "An account with this email already exists.";
                return;
            }

            // Create new user
            var user = new ApplicationUser
            {
                UserName = registerModel.Email,
                Email = registerModel.Email,
                FirstName = registerModel.FirstName,
                LastName = registerModel.LastName,
                Department = registerModel.Department,
                CreatedAt = DateTime.UtcNow,
                IsActive = true,
                DocumentQuota = 100, // Default quota
                DocumentsProcessedCount = 0
            };

            var result = await UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                Logger.LogInformation("New user registered: {Email}", registerModel.Email);
                
                // Assign default "User" role
                await UserManager.AddToRoleAsync(user, "User");
                
                // Log activity
                var context = HttpContextAccessor.HttpContext;
                var activityLog = new UserActivityLog
                {
                    Id = Guid.NewGuid(),
                    UserId = user.Id,
                    Activity = "Account Registration",
                    Details = "User registered successfully",
                    IpAddress = context?.Connection?.RemoteIpAddress?.ToString(),
                    UserAgent = context?.Request?.Headers["User-Agent"].ToString(),
                    Timestamp = DateTime.UtcNow
                };
                
                // TODO: Save activity log to database
                
                registrationSuccess = true;
                
                // Redirect to login after a delay
                await Task.Delay(3000);
                Navigation.NavigateTo("/Account/Login");
            }
            else
            {
                errorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
                Logger.LogWarning("Registration failed for {Email}: {Errors}", registerModel.Email, errorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during registration for {Email}", registerModel.Email);
            errorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class RegisterModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(100, ErrorMessage = "First name must be less than 100 characters")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(100, ErrorMessage = "Last name must be less than 100 characters")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [StringLength(100, ErrorMessage = "Department must be less than 100 characters")]
        public string? Department { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [RequiredTrue(ErrorMessage = "You must agree to the terms and conditions")]
        public bool AgreeToTerms { get; set; }
    }
}