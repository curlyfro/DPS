@page "/Account/Login"
@using Microsoft.AspNetCore.Identity
@using DocumentProcessor.Core.Entities
@using System.ComponentModel.DataAnnotations
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Navigation
@inject ILogger<Login> Logger

<PageTitle>Login - Document Processor</PageTitle>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-sm mt-5">
                <div class="card-body">
                    <h3 class="card-title text-center mb-4">
                        <i class="bi bi-shield-lock"></i> Login
                    </h3>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger alert-dismissible fade show" role="alert">
                            @errorMessage
                            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
                        </div>
                    }

                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                            <ValidationMessage For="() => loginModel.Email" class="text-danger small" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" @bind-Value="loginModel.Password" class="form-control" placeholder="Enter your password" />
                            <ValidationMessage For="() => loginModel.Password" class="text-danger small" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox id="rememberMe" @bind-Value="loginModel.RememberMe" class="form-check-input" />
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>

                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Logging in...</span>
                                }
                                else
                                {
                                    <i class="bi bi-box-arrow-in-right me-2"></i>
                                    <span>Login</span>
                                }
                            </button>
                        </div>

                        <div class="text-center mt-3">
                            <a href="/Account/ForgotPassword" class="text-decoration-none">Forgot password?</a>
                        </div>
                        
                        <hr class="my-3" />
                        
                        <div class="text-center">
                            <span class="text-muted">Don't have an account?</span>
                            <a href="/Account/Register" class="text-decoration-none ms-1">Register</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override void OnInitialized()
    {
        ReturnUrl = ReturnUrl ?? "/";
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var user = await UserManager.FindByEmailAsync(loginModel.Email);
            if (user == null)
            {
                errorMessage = "Invalid login attempt.";
                return;
            }

            if (!user.IsActive)
            {
                errorMessage = "Your account has been deactivated. Please contact support.";
                return;
            }

            var result = await SignInManager.PasswordSignInAsync(
                user,
                loginModel.Password,
                loginModel.RememberMe,
                lockoutOnFailure: true);

            if (result.Succeeded)
            {
                Logger.LogInformation("User {Email} logged in successfully", loginModel.Email);
                
                // Update last login time
                user.LastLoginAt = DateTime.UtcNow;
                await UserManager.UpdateAsync(user);
                
                Navigation.NavigateTo(ReturnUrl, forceLoad: true);
            }
            else if (result.IsLockedOut)
            {
                errorMessage = "Your account has been locked out due to multiple failed login attempts. Please try again later.";
                Logger.LogWarning("User {Email} account locked out", loginModel.Email);
            }
            else if (result.IsNotAllowed)
            {
                errorMessage = "You need to confirm your email address before logging in.";
            }
            else
            {
                errorMessage = "Invalid login attempt.";
                Logger.LogWarning("Invalid login attempt for {Email}", loginModel.Email);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login for {Email}", loginModel.Email);
            errorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}